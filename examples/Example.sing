// # LIB "modulargspc.lib";
// # LIB "random.lib";

// # configToken gc = configure_gspc();
// # gc.options.tmpdir = "/home/hbn/test/temp";
// # gc.options.nodefile = "nodefile";
// # gc.options.procspernode = 4;
// # gc.options.loghostfile = "loghostfile";
// # gc.options.logport = 9876;

// # int n = 11;
// # ring R = 0,(x(1..n+1)),dp;
// # ideal I = randomid(maxideal(1),n+1,10);
// # matrix B[2][n] = I[1..n], I[2..n+1];
// # ideal J = minor(B,2);

// # ideal L= std(J);

// # def re = gspc_modular_fres(L,gc,12,3,20,20,24);
// re;
LIB "modulargspc.lib";
LIB "random.lib";
LIB "paraplanecurves.lib";
configToken gc = configure_gspc();
gc.options.tmpdir = "/home/gnawali/gspc-modres/example_dir/temp";
gc.options.nodefile = "nodefile";
gc.options.procspernode = 1;
gc.options.loghost = "schipp";
gc.options.logport = 9876;




// ring R = 0,(x,y,z),dp;
// poly f = y^8-x^3*(z+x)^5;
// ideal adj = adjointIdeal(f);
// def Rn = mapToRatNormCurve(f,adj);
// setring(Rn);
// RNC;
// print(Rn);
// def Rc = rncItProjEven(RNC);
// PHI;
// print(Rc);
// setring Rc;

// CONIC;
// def lbr = ringlist(Rn);
// def rp = ring(lbr);
// setring rp;
// print(rp);
// ideal PHI=imap(Rn,PHI);
// //setring Rc;
// ideal CONIC=imap(Rc,CONIC);
// //setring Rn;
// print("PHI=");print(PHI);
// ideal L= ideal(CONIC);
// ideal Adj=ideal(PHI);
// int n = 11;
// ring R = 0,(x(1..n+1)),dp;
// ideal I = randomid(maxideal(1),n+1,10);
// matrix B[2][n] = I[1..n], I[2..n+1];
// ideal J = minor(B,2);

//ideal L= std(J);



//Koszul Case
// ring R=0,(u,v,w,x,y,z),(lp,c);
// ideal L=u,v,w,x,y,z;

// ring R= 0, (w,x,y,z), (dp,c);
// ideal L= w2-x*z, w*x- y*z, x2-w*y, x*y- z2, y2- w*z;

// def res=fres(L,0);
// size(res);
// print("Fres");
// print(matrix(res[size(res)-1]));
 //Example from Singular book
//  ring S=0, (x,y,z), (c,dp);
//  ideal J1=y*z+z^2,y^2 + x*z,x*y+z^2,z^3,x*z^2,x^2*z;
//  ideal L=std(J1);


// Example1
// ring S=0, (x0,x1,x2,x3,x4,x5,x6,x7,x8,x9),dp;
// matrix m[2][9]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x1,x2,x3,x4,x5,x6,x7,x8,x9;
//  ideal RNC=minor(m,2);


//Example2
// ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11),dp;
// matrix m[2][11]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;

//  ideal RNC=minor(m,2);


//Example3
// ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13),dp;
// matrix m[2][13]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
// print("m=");
// print(m);
//  ideal RNC=minor(m,2);


//Example4
// ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15),dp;
// matrix m[2][15]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15;
// print("m=");
// print(m);
//  ideal RNC=minor(m,2);

//Example For Test
//Example1
ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9),dp;
matrix m[2][9]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x1,x2,x3,x4,x5,x6,x7,x8,x9;
ideal rNC=minor(m,2);
ideal I=randomid(maxideal(1),10,11);
I;

map f=S,I[1..10];
ideal RNC=f(rNC);

// _[1]=-245112315545912005681853661602172*x0-35078951337734098575272988977274254*x1+81341897098639447117372268282998108*x2+35456532042460255786730169378380427*x3-61238890470344426699593021587942529*x4-37069405005372072659223071748304512*x5+36440361908123637742610732275749560*x6+162910429859844760204083134269011539*x7+46065794481894355457442032403947337*x8+34007797704134794832560540888974521*x9
// _[2]=-14435807098026202954151393907818534*x0-14250064822785990550223398957368700*x1+47038568523423149981431445282814735*x2-5267612221242781373523944308292381*x3-70465519591054579725326393204298025*x4+93117340053264891254004884659316525*x5+139912887847590524240016809531316912*x6+36440361908123637742610732275749560*x7-54534582833883317559275524190097074*x8+82012240205282805251032723961020483*x9
// _[3]=-83520917534944548397514966794655944*x0-108723173740467995350922984483015532*x1+30759655427368838455173814644552181*x2-43642330069108634886295408912923817*x3-26505273520344060037812622109617960*x4+166995998102769557134392704922897393*x5+93117340053264891254004884659316525*x6-37069405005372072659223071748304512*x7-55315178329251968153964365009629293*x8-11447358456789792009886907172848838*x9
// _[4]=-18276458528798171133450327592100606*x0+9975565925907485386973863554589146*x1-47742554143699949858026854977363882*x2-9949934165495375128836795313090677*x3+24456940309919303906238684384969760*x4-26505273520344060037812622109617960*x5-70465519591054579725326393204298025*x6-61238890470344426699593021587942529*x7+1201202560601759773448952565647069*x8-61539739679526665640392442386363821*x9
// _[5]=-62119669799751725690398200275216316*x0-27885771740626754566325464255974612*x1-17278587363694210260911344882861671*x2-5435125216778617909910243570965378*x3-9949934165495375128836795313090677*x4-43642330069108634886295408912923817*x5-5267612221242781373523944308292381*x6+35456532042460255786730169378380427*x7+10370346802154400789995802965479806*x8-3216977864231425055747508797901869*x9
// _[6]=13744807799031013236482134553276034*x0+6013342986704224333481126170761968*x1+7254102293006478919608530575168467*x2-17278587363694210260911344882861671*x3-47742554143699949858026854977363882*x4+30759655427368838455173814644552181*x5+47038568523423149981431445282814735*x6+81341897098639447117372268282998108*x7-15357932428022028181802091375618106*x8+79053323171813516592888504726632875*x9
// _[7]=-38080076673909487249098389904472162*x1+6013342986704224333481126170761968*x2-27885771740626754566325464255974612*x3+9975565925907485386973863554589146*x4-108723173740467995350922984483015532*x5-14250064822785990550223398957368700*x6-35078951337734098575272988977274254*x7-50417805807894783599462552391413109*x8+6291717504663547120386898858397827*x9
// _[8]=13744807799031013236482134553276034*x2-62119669799751725690398200275216316*x3-18276458528798171133450327592100606*x4-83520917534944548397514966794655944*x5-14435807098026202954151393907818534*x6-245112315545912005681853661602172*x7+100092663287909579820583377512944606*x8-30687205808494147881750817598857948*x9
// timer
// 155873


ring S=32003,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9),dp;
matrix m[2][9]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x1,x2,x3,x4,x5,x6,x7,x8,x9;
ideal rNC=minor(m,2);
ideal I=randomid(maxideal(1),10,11);
I;

map f=S,I[1..10];
ideal RNC=f(rNC);
rtimer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t5=rtimer;
//rncAntiCanonicalMap(RNC);
rncItProjOdd(RNC);
print("timer");
rtimer-t5;





// Example2

ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10),dp;
matrix m[2][10]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10;

ideal rNC=minor(m,2);

ideal I=randomid(maxideal(1),11,11);
I;

map f=S,I[1..11];
ideal RNC=f(rNC);
rtimer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t2=rtimer;
rncAntiCanonicalMap(RNC);
print("timer");
rtimer-t2;





//char=32003
ring S=32003,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10),dp;
matrix m[2][10]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10;

ideal rNC=minor(m,2);

ideal I=randomid(maxideal(1),11,11);
I;

map f=S,I[1..11];
ideal RNC=f(rNC);
rtimer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t3=rtimer;
rncAntiCanonicalMap(RNC);
print("timer");
rtimer-t3;



//Example3
ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11),dp;
matrix m[2][11]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;

ideal rNC=minor(m,2);

ideal I=randomid(maxideal(1),12,11);
I;

map f=S,I[1..12];
ideal RNC=f(rNC);
rtimer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t4=rtimer;
//rncAntiCanonicalMap(RNC);
rncItProjOdd(RNC);
print("timer");
rtimer-t4;

_[1]=135818851844551867284360066449391731372110*x0+65032576055554146913271339488528585045578*x1+5729185272814260229309550147792667460456*x2+45758183236103570421170534827043380994675*x3-176236743750656937243112472005903531038024*x4-55829217567489975220724353791941931251258*x5-84748555602188332804997082492513208505897*x6-81429803993065299043376265634944487751909*x7+93828357621796585933592919548915159902794*x8-117667801554267205676738510789759841881758*x9-272061884883146729707823965307297325599636*x10-187039751388755260517326134540325049521302*x11
_[2]=106115634026760482146660064881788450100282*x0-22702376428825664414330008734725885571701*x1+79040146695072684990339221602441391133821*x2+322779828506314533697738126328880601791276*x3+110480361166224298436367210880803887018004*x4+342420672013085388185853350977849655584873*x5+309471508050422913538268315438981771948738*x6+161790136832998922514545206386390207926023*x7+162068506031696748754849290006314717734644*x8+93828357621796585933592919548915159902794*x9-290627433914416646259125521233744340220164*x10-223392770300108419642183789410461211275476*x11
_[3]=218178844089974341490866261407235179247672*x0+13507071576981612480991729262877085939902*x1-133491293074096991819379117862846300007629*x2+68255915231127011127247481216474875900593*x3-27134992308275023723752221023667631094285*x4-66512584802563215093513744548410727211801*x5-174587257375133818604057987427148083826579*x6-16517956183231425811629605461861061420943*x7+161790136832998922514545206386390207926023*x8-81429803993065299043376265634944487751909*x9-152361949405161840117132589666521855518316*x10+4802687698478714567293340928119069175215*x11
_[4]=243278681198756237548479134410576753632399*x0-26531279237562203271032433348955154056370*x1+410009265096434502046354265031906372490980*x2+160581254814578541793326783821394717511827*x3-211247241713420990774565359818674804200376*x4-39306125946469379936667868984813393454206*x5+49007409003025108413894051490668030881859*x6-174587257375133818604057987427148083826579*x7+309471508050422913538268315438981771948738*x8-84748555602188332804997082492513208505897*x9-419797638751229164790165597957423480559512*x10-33271888327168109156477133888558584272299*x11
_[5]=269523532142375357432424378040593346348623*x0+21522740576637098432585078596311371449852*x1+203950057529342825257232494021707027888163*x2+122579246459663780183256007404764859539578*x3-177019107363170436003309835035793521432204*x4-14672364002710804985157530946021720133052*x5-39306125946469379936667868984813393454206*x6-66512584802563215093513744548410727211801*x7+342420672013085388185853350977849655584873*x8-55829217567489975220724353791941931251258*x9-503622616886879301150337008584868593417516*x10-188419825876072364436498349155362369676533*x11
_[6]=270283153674713759114875386986805752391473*x0+24066785652266331596041655327979954405568*x1-83550852902259765760795503871034799935418*x2+60856442140954103157958337590936688719426*x3-27150526001742159757509428755813917020827*x4-177019107363170436003309835035793521432204*x5-211247241713420990774565359818674804200376*x6-27134992308275023723752221023667631094285*x7+110480361166224298436367210880803887018004*x8-176236743750656937243112472005903531038024*x9-115070666966061453836904928680730681238887*x10+22124821726811551654605830344874997765079*x11
_[7]=136766232000614002047623072962118769398039*x0-9199200835737299484568770690275248189152*x1+237530590664521170281078893758946640652663*x2+178902614338062999876254387107994142321900*x3+60856442140954103157958337590936688719426*x4+122579246459663780183256007404764859539578*x5+160581254814578541793326783821394717511827*x6+68255915231127011127247481216474875900593*x7+322779828506314533697738126328880601791276*x8+45758183236103570421170534827043380994675*x9-429707176323595076993053931415339906489366*x10-204163758967663935180156322952013294674588*x11
_[8]=31736307640225984844151946594454252956408*x0-24252014371222194731044408101347784646909*x1+602812967192162499328271254072574812060029*x2+237530590664521170281078893758946640652663*x3-83550852902259765760795503871034799935418*x4+203950057529342825257232494021707027888163*x5+410009265096434502046354265031906372490980*x6-133491293074096991819379117862846300007629*x7+79040146695072684990339221602441391133821*x8+5729185272814260229309550147792667460456*x9-99993563360841766396436074884507579615386*x10+59272883446790424766932031500568560683560*x11
_[9]=-61194125990008328018525851205167649260698*x1-24252014371222194731044408101347784646909*x2-9199200835737299484568770690275248189152*x3+24066785652266331596041655327979954405568*x4+21522740576637098432585078596311371449852*x5-26531279237562203271032433348955154056370*x6+13507071576981612480991729262877085939902*x7-22702376428825664414330008734725885571701*x8+65032576055554146913271339488528585045578*x9+182347784321194363828334582408937910667902*x10+229083555329225459980261953621441828909125*x11
_[10]=31736307640225984844151946594454252956408*x2+136766232000614002047623072962118769398039*x3+270283153674713759114875386986805752391473*x4+269523532142375357432424378040593346348623*x5+243278681198756237548479134410576753632399*x6+218178844089974341490866261407235179247672*x7+106115634026760482146660064881788450100282*x8+135818851844551867284360066449391731372110*x9-157263283269851127148489970149685618187750*x10-194360676217404492940490570402664538583741*x11







//char =32003

ring S=32003,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11),dp;
matrix m[2][11]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;

ideal rNC=minor(m,2);

ideal I=randomid(maxideal(1),12,11);
I;

map f=S,I[1..12];
ideal RNC=f(rNC);
rtimer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t4=rtimer;
//rncAntiCanonicalMap(RNC);
rncItProjOdd(RNC);print("timer");
rtimer-t4;



RNC;
// ideal f=rncItProjOdd(RNC);
// print("ideal f=");
// print(f);
// ideal PHI=f;
ideal L=RNC;



list #=list(12,3,20,20,50);

// def re = gspc_modular_fres(adj,L,gc,#);
// re;
rtimer=0;
 system("--ticks-per-sec",1000); // set timer resolution to ms
 int t=rtimer;
def re = gspc_modular_parametrization_C(L,gc,#);

setring re;
im;
rtimer-t;
print("timer");








//pnet: cat modular.xpnet | pnetc  | pnet2dot | dot -Tsvg > Modular_res.svg

//Starting monitor:gspc-monitor --port 9876 &


//<include-structs href="/home/gnawali/gspc-modres/modular_res/workflow/structures.xpnet"/>





//Test For Invert
//Example1 
ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9),dp;
matrix m[2][9]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x1,x2,x3,x4,x5,x6,x7,x8,x9;
ideal rNC=minor(m,2);
ideal I=randomid(maxideal(1),10,11);
I;

map f=S,I[1..10];
ideal RNC=f(rNC);




rtimer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t4=rtimer;
//rncAntiCanonicalMap(RNC);
 ideal f0=rncItProjOdd(RNC);
def Rn = invertBirMap(f0, RNC);
setring(Rn);
psi;
print("timer");
rtimer-t4;

//char =32003

ring S=32003,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9),dp;
matrix m[2][9]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x1,x2,x3,x4,x5,x6,x7,x8,x9;
ideal rNC=minor(m,2);
ideal I=randomid(maxideal(1),10,11);
I;

map f=S,I[1..10];
ideal RNC=f(rNC);




rtimer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t6=rtimer;
//rncAntiCanonicalMap(RNC);
 ideal f0=rncItProjOdd(RNC);
def Rn = invertBirMap(f0, RNC);
setring(Rn);
psi;
print("timer");
rtimer-t6;


//Example2







ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11),dp;
matrix m[2][11]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;

ideal rNC=minor(m,2);

ideal I=randomid(maxideal(1),12,11);
I;

map f=S,I[1..12];
ideal RNC=f(rNC);

rtimer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t6=rtimer;
//rncAntiCanonicalMap(RNC);
 ideal f0=rncItProjOdd(RNC);
def Rn = invertBirMap(f0, RNC);
setring(Rn);
psi;
print("timer");
rtimer-t6;

//char =32003
ring S=32003,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11),dp;
matrix m[2][11]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;

ideal rNC=minor(m,2);

ideal I=randomid(maxideal(1),12,11);
I;

map f=S,I[1..12];
ideal RNC=f(rNC);

rtimer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t6=rtimer;
//rncAntiCanonicalMap(RNC);
 ideal f0=rncItProjOdd(RNC);
def Rn = invertBirMap(f0, RNC);
setring(Rn);
psi;
print("timer");
rtimer-t6;