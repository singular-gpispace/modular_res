// # LIB "modulargspc.lib";
// # LIB "random.lib";

// # configToken gc = configure_gspc();
// # gc.options.tmpdir = "/home/hbn/test/temp";
// # gc.options.nodefile = "nodefile";
// # gc.options.procspernode = 4;
// # gc.options.loghostfile = "loghostfile";
// # gc.options.logport = 9876;

// # int n = 11;
// # ring R = 0,(x(1..n+1)),dp;
// # ideal I = randomid(maxideal(1),n+1,10);
// # matrix B[2][n] = I[1..n], I[2..n+1];
// # ideal J = minor(B,2);

// # ideal L= std(J);

// # def re = gspc_modular_fres(L,gc,12,3,20,20,24);
// re;
LIB "modulargspc.lib";
LIB "random.lib";
LIB "paraplanecurves.lib";
configToken gc = configure_gspc();
gc.options.tmpdir = "/home/gnawali/gspc-modres/example_dir/temp";
gc.options.nodefile = "nodefile";
gc.options.procspernode = 6;
gc.options.loghost = "schipp";
gc.options.logport = 9876;




// ring R = 0,(x,y,z),dp;
// poly f = y^8-x^3*(z+x)^5;
// ideal adj = adjointIdeal(f);
// def Rn = mapToRatNormCurve(f,adj);
// setring(Rn);
// RNC;
// print(Rn);
// def Rc = rncItProjEven(RNC);
// PHI;
// print(Rc);
// setring Rc;

// CONIC;
// def lbr = ringlist(Rn);
// def rp = ring(lbr);
// setring rp;
// print(rp);
// ideal PHI=imap(Rn,PHI);
// //setring Rc;
// ideal CONIC=imap(Rc,CONIC);
// //setring Rn;
// print("PHI=");print(PHI);
// ideal L= ideal(CONIC);
// ideal Adj=ideal(PHI);
// int n = 11;
// ring R = 0,(x(1..n+1)),dp;
// ideal I = randomid(maxideal(1),n+1,10);
// matrix B[2][n] = I[1..n], I[2..n+1];
// ideal J = minor(B,2);

//ideal L= std(J);



//Koszul Case
// ring R=0,(u,v,w,x,y,z),(lp,c);
// ideal L=u,v,w,x,y,z;

// ring R= 0, (w,x,y,z), (dp,c);
// ideal L= w2-x*z, w*x- y*z, x2-w*y, x*y- z2, y2- w*z;

// def res=fres(L,0);
// size(res);
// print("Fres");
// print(matrix(res[size(res)-1]));
 //Example from Singular book
//  ring S=0, (x,y,z), (c,dp);
//  ideal J1=y*z+z^2,y^2 + x*z,x*y+z^2,z^3,x*z^2,x^2*z;
//  ideal L=std(J1);


// Example1
// ring S=0, (x0,x1,x2,x3,x4,x5),dp;
// matrix m[2][5]=x0,x1,x2,x3,x4,x1,x2,x3,x4,x5;
//  ideal RNC=minor(m,2);
//  //veryfi
//  ring R=0, (y1,y2), dp;
// map f=S,y1^5,y1^4*y2,y1^3*y2^2,y1^2*y2^3,y1*y2^4,y2^5;
// f(RNC);

//Example2
// ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11),dp;
// matrix m[2][11]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;

//  ideal RNC=minor(m,2);
// //  //veryfi
//  ring R=0, (y(1),y(2), dp;
// map f=S,y(1)^11,-y(1)^10*y(2),y(1)^9*y(2)^2,-y(1)^8*y(2)^3,y(1)^7*y(2)^4,-y(1)^6*y(2)^5,y(1)^5*y(2)^6,-y(1)^4*y(2)^7,y(1)^3*y(2)^8,-y(1)^2*y(2)^9,y(1)*y(2)^10,-y(2)^11;
// f(RNC);

//Example3
// ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13),dp;
// matrix m[2][13]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
// print("m=");
// print(m);
//  ideal RNC=minor(m,2);


//Example4
// ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15),dp;
// matrix m[2][15]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15;
// print("m=");
// print(m);
//  ideal RNC=minor(m,2);

//Example For Test
//Example1

// ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9),dp;
// matrix m[2][9]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x1,x2,x3,x4,x5,x6,x7,x8,x9;
// ideal rNC=minor(m,2);
// ideal I=randomid(maxideal(1),10,11);
// I;

// map f=S,I[1..10];
// ideal RNC=f(rNC);

// _[1]=-245112315545912005681853661602172*x0-35078951337734098575272988977274254*x1+81341897098639447117372268282998108*x2+35456532042460255786730169378380427*x3-61238890470344426699593021587942529*x4-37069405005372072659223071748304512*x5+36440361908123637742610732275749560*x6+162910429859844760204083134269011539*x7+46065794481894355457442032403947337*x8+34007797704134794832560540888974521*x9
// _[2]=-14435807098026202954151393907818534*x0-14250064822785990550223398957368700*x1+47038568523423149981431445282814735*x2-5267612221242781373523944308292381*x3-70465519591054579725326393204298025*x4+93117340053264891254004884659316525*x5+139912887847590524240016809531316912*x6+36440361908123637742610732275749560*x7-54534582833883317559275524190097074*x8+82012240205282805251032723961020483*x9
// _[3]=-83520917534944548397514966794655944*x0-108723173740467995350922984483015532*x1+30759655427368838455173814644552181*x2-43642330069108634886295408912923817*x3-26505273520344060037812622109617960*x4+166995998102769557134392704922897393*x5+93117340053264891254004884659316525*x6-37069405005372072659223071748304512*x7-55315178329251968153964365009629293*x8-11447358456789792009886907172848838*x9
// _[4]=-18276458528798171133450327592100606*x0+9975565925907485386973863554589146*x1-47742554143699949858026854977363882*x2-9949934165495375128836795313090677*x3+24456940309919303906238684384969760*x4-26505273520344060037812622109617960*x5-70465519591054579725326393204298025*x6-61238890470344426699593021587942529*x7+1201202560601759773448952565647069*x8-61539739679526665640392442386363821*x9
// _[5]=-62119669799751725690398200275216316*x0-27885771740626754566325464255974612*x1-17278587363694210260911344882861671*x2-5435125216778617909910243570965378*x3-9949934165495375128836795313090677*x4-43642330069108634886295408912923817*x5-5267612221242781373523944308292381*x6+35456532042460255786730169378380427*x7+10370346802154400789995802965479806*x8-3216977864231425055747508797901869*x9
// _[6]=13744807799031013236482134553276034*x0+6013342986704224333481126170761968*x1+7254102293006478919608530575168467*x2-17278587363694210260911344882861671*x3-47742554143699949858026854977363882*x4+30759655427368838455173814644552181*x5+47038568523423149981431445282814735*x6+81341897098639447117372268282998108*x7-15357932428022028181802091375618106*x8+79053323171813516592888504726632875*x9
// _[7]=-38080076673909487249098389904472162*x1+6013342986704224333481126170761968*x2-27885771740626754566325464255974612*x3+9975565925907485386973863554589146*x4-108723173740467995350922984483015532*x5-14250064822785990550223398957368700*x6-35078951337734098575272988977274254*x7-50417805807894783599462552391413109*x8+6291717504663547120386898858397827*x9
// _[8]=13744807799031013236482134553276034*x2-62119669799751725690398200275216316*x3-18276458528798171133450327592100606*x4-83520917534944548397514966794655944*x5-14435807098026202954151393907818534*x6-245112315545912005681853661602172*x7+100092663287909579820583377512944606*x8-30687205808494147881750817598857948*x9
// timer
// 155873

//char=32003
// ring S=32003,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9),dp;
// matrix m[2][9]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x1,x2,x3,x4,x5,x6,x7,x8,x9;
// ideal rNC=minor(m,2);
// ideal I=randomid(maxideal(1),10,11);
// I;

// map f=S,I[1..10];
// ideal RNC=f(rNC);
// rtimer=0;
// system("--ticks-per-sec",1000); // set timer resolution to ms
// int t1=rtimer;
// rncAntiCanonicalMap(RNC);
// print("timer");
// rtimer-t1;


//Example 2

// ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10),dp;
// matrix m[2][10]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10;

// ideal rNC=minor(m,2);

// ideal I=randomid(maxideal(1),11,11);
// I;

// map f=S,I[1..11];
// ideal RNC=f(rNC);
// rtimer=0;
// system("--ticks-per-sec",1000); // set timer resolution to ms
// int t2=rtimer;
// rncAntiCanonicalMap(RNC);
// print("timer");
// rtimer-t2;

//Example 3
// ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11),dp;
// matrix m[2][11]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;

// ideal rNC=minor(m,2);

// ideal I=randomid(maxideal(1),12,11);
// I;

// map f=S,I[1..12];
// ideal RNC=f(rNC);
// rtimer=0;
// system("--ticks-per-sec",1000); // set timer resolution to ms
// int t4=rtimer;
// rncAntiCanonicalMap(RNC);
// print("timer");
// rtimer-t4;

//Example 4

// ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12),dp;
// matrix m[2][12]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12;
// ideal rNC=minor(m,2);

// ideal I=randomid(maxideal(1),13,11);
// I;

// map f=S,I[1..13];
// ideal RNC=f(rNC);
// rtimer=0;
// system("--ticks-per-sec",1000); // set timer resolution to ms
// int t4=rtimer;
// rncAntiCanonicalMap(RNC);
// print("timer");
// rtimer-t4;



//char =32003
// ring S=32003,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12),dp;
// matrix m[2][12]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12;
// ideal rNC=minor(m,2);

// ideal I=randomid(maxideal(1),13,11);
// I;

// map f=S,I[1..13];
// ideal RNC=f(rNC);
// rtimer=0;
// system("--ticks-per-sec",1000); // set timer resolution to ms
// int t4=rtimer;
// rncAntiCanonicalMap(RNC);
// print("timer");
// rtimer-t4;



// //Debugging CRT
// ring S=0, (x0,x1,x2,x3,x4,x5),dp;
// matrix m[2][5]=x0,x1,x2,x3,x4,x1,x2,x3,x4,x5;

// ideal rNC=minor(m,2);

// ideal I=randomid(maxideal(1),6,7);
// I;

// map f=S,I[1..6];
// ideal RNC=f(rNC);
// RNC;
// ideal f=rncItProjOdd(RNC);
// print("ideal f=");
// print(f);
// ideal PHI=f;

// ring S=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11),dp;
// matrix m[2][11]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11;
// ideal rNC=minor(m,2);
// ideal I=randomid(maxideal(1),12,5);
// I;
// map f=S,I[1..12];
// ideal RNC=f(rNC);

// ideal L=RNC;
// list #=list(12,3,20,20,30);

// // def re = gspc_modular_fres(adj,L,gc,#);
// // re;
// rtimer=0;
//  system("--ticks-per-sec",1000); // set timer resolution to ms
//  int t=rtimer;
// def re = gspc_modular_parametrization_C(L,gc,#);

// setring re;
// im;

// rtimer-t;
// print("timer");

// ideal l=im[1][1],im[1][2],im[1][3],im[1][4],im[1][5],im[1][6],im[1][7],im[1][8],im[1][9],im[1][10],im[1][11],im[1][12];
// map g=S,l[1..12];
// g(RNC);



//FOr ODD (Cnstructing Rational Curve)

//  1. 
  ring R=0,(x0,x1,x2,x3,x4,x5,x6,x7),dp;
ring S=0,(t0,t1),dp;

 ideal I=randomid(maxideal(7),8);

 map f=R,I[1..8];

 setring R;
ideal RNC= kernel(S,f);

ideal L=RNC;
list #=list(12,3,20,20,30);

// def re = gspc_modular_fres(adj,L,gc,#);
// re;
rtimer=0;
 system("--ticks-per-sec",1000); // set timer resolution to ms
 int t=rtimer;
def re = gspc_modular_parametrization_C(L,gc,#);

setring re;
im;

rtimer-t;
print("timer");

ideal l=im[1][1],im[1][2],im[1][3],im[1][4],im[1][5],im[1][6],im[1][7],im[1][8];
map g=R,l[1..8];
g(RNC);

//2. 
// ring R=0,(x(1..10)),dp;
// ring S=0,(t0,t1),dp;

//  ideal I=randomid(maxideal(9),10);

//  map f=R,I[1..10];

//  setring R;
// ideal RNC= kernel(S,f);
// ideal L=RNC;
// list #=list(12,3,20,20,30);

// // def re = gspc_modular_fres(adj,L,gc,#);
// // re;
// rtimer=0;
//  system("--ticks-per-sec",1000); // set timer resolution to ms
//  int t=rtimer;
// def re = gspc_modular_parametrization_C(L,gc,#);

// setring re;
// im;

// rtimer-t;
// print("timer");

// ideal l=im[1][1],im[1][2],im[1][3],im[1][4],im[1][5],im[1][6],im[1][7],im[1][8],im[1][9],im[1][10];
// map g=R,l[1..10];
// g(RNC);
//3.
// ring R=0,(x(1..14)),dp;
// ring S=0,(t0,t1),dp;

//  ideal I=randomid(maxideal(13),14,3);

//  map f=R,I[1..14];

//  setring R;
// ideal RNC= kernel(S,f);
// ideal L=RNC;
// list #=list(12,3,20,20,30);

// // def re = gspc_modular_fres(adj,L,gc,#);
// // re;
// rtimer=0;
//  system("--ticks-per-sec",1000); // set timer resolution to ms
//  int t=rtimer;
// def re = gspc_modular_parametrization_C(L,gc,#);

// setring re;
// im;

// rtimer-t;
// print("timer");

// ideal l=im[1][1],im[1][2],im[1][3],im[1][4],im[1][5],im[1][6],im[1][7],im[1][8],im[1][9],im[1][10],im[1][11],im[1][12],im[1][13],im[1][14];
// map g=R,l[1..14];
// g(RNC);

//4.
// ring R=0,(x(1..14)),dp;
// ring S=0,(t0,t1),dp;

//  ideal I=randomid(maxideal(13),14);

//  map f=R,I[1..14];

//  setring R;
// ideal RNC= kernel(S,f);
// ideal L=RNC;
// list #=list(12,3,20,20,30);

// // def re = gspc_modular_fres(adj,L,gc,#);
// // re;
// rtimer=0;
//  system("--ticks-per-sec",1000); // set timer resolution to ms
//  int t=rtimer;
// def re = gspc_modular_parametrization_C(L,gc,#);

// setring re;
// im;

// rtimer-t;
// print("timer");

// ideal l=im[1][1],im[1][2],im[1][3],im[1][4],im[1][5],im[1][6],im[1][7],im[1][8],im[1][9],im[1][10],im[1][11],im[1][12],im[1][13],im[1][14];
// map g=R,l[1..14];
// g(RNC);
// re;
// 1. 
// ring R=0,(x0,x1,x2,x3,x4,x5,x6),dp;
// ring S0=0,(t0,t1),dp;

//  ideal I=randomid(maxideal(6),7,17);

//  map f=R,I[1..7];

//  setring R;
// ideal RNC= kernel(S0,f);

// ideal L=RNC;
// list #=list(12,3,20,20,30);
// rtimer=0;
//  system("--ticks-per-sec",1000); // set timer resolution to ms
//  int t=rtimer;
// def re = gspc_modular_parametrization_C(L,gc,#);

// setring re;
// im;

// rtimer-t;
// print("timer");
// ideal conic=im[2];
// print("Ideal conic");
// // ideal l=im[1][1],im[1][2],im[1][3],im[1][4],im[1][5];
// // map g0=S,l[1..5];
// // print("g0(RNC) in Subring");
// // g0(RNC);
// qring R1=std(conic);
// list im=fetch(re,im);




// ideal l=im[1][1],im[1][2],im[1][3],im[1][4],im[1][5],im[1][6],im[1][7];
// map g=R,l[1..7];

// reduce(g(RNC),std(0));


//2.


// 3. Does not finish in almost an hour
// ring R=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10),dp;
// ring S0=0,(t0,t1),dp;

//  ideal I=randomid(maxideal(10),11);

//  map f=R,I[1..11];

//  setring R;
// ideal RNC= kernel(S0,f);

// ideal L=RNC;
// list #=list(12,3,20,20,30);
// rtimer=0;
//  system("--ticks-per-sec",1000); // set timer resolution to ms
//  int t=rtimer;
// def re = gspc_modular_parametrization_C(L,gc,#);

// setring re;
// im;

// rtimer-t;
// print("timer");
// ideal conic=im[2];
// print("Ideal conic");
// // ideal l=im[1][1],im[1][2],im[1][3],im[1][4],im[1][5];
// // map g0=S,l[1..5];
// // print("g0(RNC) in Subring");
// // g0(RNC);
// qring R1=std(conic);
// list im=fetch(re,im);



// ideal l=im[1][1],im[1][2],im[1][3],im[1][4],im[1][5],im[1][6],im[1][7],im[1][8],im[1][9],im[1][10],im[1][11];
// map g=R,l[1..11];

// reduce(g(RNC),std(0));


//pnet: cat modular.xpnet | pnetc  | pnet2dot | dot -Tsvg > Modular_res.svg

//Starting monitor:gspc-monitor --port 9876 &


//<include-structs href="/home/gnawali/gspc-modres/modular_res/workflow/structures.xpnet"/>









