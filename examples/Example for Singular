





LIB "random.lib";
LIB "paraplanecurves.lib";

system("random", 10 );
ring R = 0,(x,y,z),dp;
poly f= y^9-x^5*(z+x)^4;
ideal I=randomid(maxideal(1),3,31);
map g=R,I[1..3];
poly F=g(f);

ideal adj = adjointIdeal(f);
def Rn = mapToRatNormCurve(f,adj);
setring(Rn);
RNC;
rtimer=0;
 system("--ticks-per-sec",1000); 
 int t0=rtimer;
ideal phi=rncItProjOdd(RNC);

def R0 = invertBirMap(phi,RNC);


setring R0;
psi;
print("timer");
rtimer-t0;
ideal l=psi[1..8];
map g=Rn,l[1..8];
g(RNC);
//ODD cases







1.
   ring R=0,(x0,x1,x2,x3,x4,x5,x6,x7),dp;
ring S=0,(t0,t1),dp;

 ideal I=randomid(maxideal(7),8);

 map f=R,I[1..8];

 setring R;
ideal RNC= kernel(S,f);

rtimer=0;
 system("--ticks-per-sec",1000); 
 int t0=rtimer;
ideal phi=rncItProjOdd(RNC);

def Rn = invertBirMap(phi,RNC);
rtimer-t0;

setring Rn;
psi;
ideal l=psi[1..8];
map g=R,l[1..8];
g(RNC);


2. 
LIB "random.lib";
LIB "paraplanecurves.lib";

system("random", 10 );
 ring R=0,(x(1..10)),dp;
ring S=0,(t0,t1),dp;

 ideal I=randomid(maxideal(9),10);

 map f=R,I[1..10];

 setring R;
ideal RNC= kernel(S,f);
rtimer=0;
 system("--ticks-per-sec",1000); 
 int t1=rtimer;
ideal phi=rncItProjOdd(RNC);

def Rn = invertBirMap(phi,RNC);
rtimer-t1;

setring Rn;
psi;
ideal l=psi[1..10];
map g=R,l[1..10];
g(RNC);

3. 
LIB "random.lib";
LIB "paraplanecurves.lib";
system("random", 10 );
ring R=0,(x(1..12)),dp;
ring S=0,(t0,t1),dp;

 ideal I=randomid(maxideal(11),12);

 map f=R,I[1..12];

 setring R;
ideal RNC= kernel(S,f);
rtimer=0;
 system("--ticks-per-sec",1000); 
 int t2=rtimer;
ideal phi=rncItProjOdd(RNC);

def Rn = invertBirMap(phi,RNC);
rtimer-t2;

setring Rn;
psi;
ideal l=psi[1..12];
map g=R,l[1..12];
g(RNC);

4. ring R=0,(x(1..14)),dp;
ring S=0,(t0,t1),dp;

 ideal I=randomid(maxideal(13),14,5);

 map f=R,I[1..14];

 setring R;
ideal RNC= kernel(S,f);
rtimer=0;
 system("--ticks-per-sec",1000); 
 int t3=rtimer;
ideal phi=rncItProjOdd(RNC);

def Rn = invertBirMap(phi,RNC);
rtimer-t3;

setring Rn;
psi;
ideal l=psi[1..14];
map g=R,l[1..14];
g(RNC);



//For Singular
ring S=0, (x0,x1,x2,x3,x4,x5,x6),dp;
matrix m[2][6]=x0,x1,x2,x3,x4,x5,x1,x2,x3,x4,x5,x6;
ideal RNC=minor(m,2);

def Rc = rncItProjEven(RNC);
PHI;
 def Rn = invertBirMap(PHI, RNC);