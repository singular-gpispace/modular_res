


// LIB "random.lib";
// LIB "paraplanecurves.lib";
// ring R = 0,(x,y,z),dp;
// poly F= y^8-x^3*(z+x)^5;
// // ideal I=randomid(maxideal(1),3,11);
// // map g=R,I[1..3];
// // poly F=g(f);
// ideal adj = adjointIdeal(F);
// rtimer=0;

// system("--ticks-per-sec",1000); // set timer resolution to ms
// int t=rtimer;
// def R1= mapToRatNormCurve(F, adj);
// setring(R1);

// RNC;
// // ideal ph0 = rncAntiCanonicalMap(RNC);
// ideal adj=fetch(R,adj);
// map g = R1, adj[1..size(adj)];

// // // Compose map
// ideal phCom= g(RNC);
// print("phCom=");print(phCom);

// poly F=fetch(R,F);
// // Compute inverse birational map
// def Rn= invertBirMap(phCom, ideal(F));
// setring Rn;

// psi;
// rtimer-t;
// print("timer");