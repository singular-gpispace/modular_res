


LIB "random.lib";
LIB "paraplanecurves.lib";
// ring R = 0,(x,y,z),dp;
// poly F= y^8-x^3*(z+x)^5;
// // ideal I=randomid(maxideal(1),3,11);
// // map g=R,I[1..3];
// // poly F=g(f);
// ideal adj = adjointIdeal(F);
// rtimer=0;

// system("--ticks-per-sec",1000); // set timer resolution to ms
// int t=rtimer;
// def R1= mapToRatNormCurve(F, adj);
// setring(R1);

// RNC;
// def Rc = rncItProjEven(RNC);
// PHI;

// setring Rc;


// CONIC;
// //  ideal ph0 = rncAntiCanonicalMap(RNC);
// ideal adj=fetch(R,adj);
// map g = Rc, adj[1..size(adj)];

// // // Compose map
// ideal phCom= g(PHI);
// print("phCom=");print(PHI);

// poly F=fetch(R,F);
// // Compute inverse birational map
// def Rn= invertBirMap(phCom, ideal(F));
// setring Rn;

// psi;
// rtimer-t;
// print("timer");

//Odd cases



ring R = 0,(x,y,z),dp;

poly f= y^5-x^3*(z+x)^2;
ideal I=randomid(maxideal(1),3,13);
map g=R,I[1..3];
poly F=g(f);
 ideal adj = adjointIdeal(F);
 rtimer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t=rtimer;
def R1= mapToRatNormCurve(F, adj);

 setring R1;
RNC;
ideal f0 = rncItProjOdd(RNC);
 setring R;
 map g=R1,adj[1..size(adj)];
 ideal phCom=g(f0);
def Rn= invertBirMap(phCom, ideal(F));

 setring Rn;
 psi;
 print("timer");
 rtimer-t;
map g1=R,psi[1..3];
print("verification");
g1(F);


LIB "random.lib";
LIB "paraplanecurves.lib";
system("random", 10 );

ring R = 0,(x,y,z),dp;

poly f= y^9-x^5*(z+x)^4;
ideal I=randomid(maxideal(1),3,31);

map g=R,I[1..3];
poly F=g(f);
rtimer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t=rtimer;
 ideal adj = adjointIdeal(F);

 rtimer-t;
 print("timer for adjoint");
 int t1=rtimer;
def R1= mapToRatNormCurve(F, adj);

 setring R1;
RNC;
ideal f0 = rncItProjOdd(RNC);
 setring R;
 map g=R1,adj[1..size(adj)];
 ideal phCom=g(f0);
def Rn= invertBirMap(phCom, ideal(F));

 setring Rn;
 psi;
 print("timer");
 rtimer-t1;
map g1=R,psi[1..3];
print("verification");
g1(F);




//Even degree cases
LIB "random.lib";
LIB "paraplanecurves.lib";
system("random", 10 );
ring R = 0,(x,y,z),dp;
poly F = y^8-x^3*(z+x)^5;
ideal I=randomid(maxideal(1),3,31);
map g=R,I[1..3];
poly f=g(F);

rtimer=0;
system("--ticks-per-sec",1000); // set timer resolution to ms
int t1=rtimer;
 ideal adj = adjointIdeal(f);


def R1= mapToRatNormCurve(f, adj);

 setring R1;
RNC;def Rc = rncItProjEven(RNC);
PHI;


setring Rc;

ideal conic =CONIC;

setring R;
map g = R1, adj[1..size(adj)];
// Compose map
ideal phCom= g(PHI);
def Rn= invertBirMap(phCom, ideal(f));
setring Rn;

psi;
print("timer");
rtimer-t1;
ideal conic=fetch(Rc,conic);
qring R1=std(conic);
ideal psi=fetch(Rn,psi);
ideal l=psi[1],psi[2],psi[3];
map g1=R,l[1..3];

reduce(g1(f),std(0));

// link l="ssi:r temp/adjideal.ssi";
// def m1=read(l);
// def m2=read(l);
// def m3=read(l);
// def m4=read(l);
// def m5=read(l);
// def m6=read(l);
// def m7=read(l);
// def m8=read(l);
// def m9=read(l);
// def m10=read(l);
// def m11=read(l);
// def m12=read(l);
