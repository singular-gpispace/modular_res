 
 
  //Even cases
 
//THis is we construct RNC 
system("random", 10 );
ring R = 0,(x,y,z),dp;
poly F = y^8-x^3*(z+x)^5;
ideal I=randomid(maxideal(1),3,31);
map g=R,I[1..3];
poly f=g(F);

ideal adj = adjointIdeal(f);
def Rn = mapToRatNormCurve(f,adj);
setring(Rn);
RNC;

rtimer=0;
 system("--ticks-per-sec",1000); 
 int t=rtimer;
 def Rc = rncItProjEven(RNC);
PHI;

setring Rc;
ideal conic =CONIC;
setring Rn;
 def R0 = invertBirMap(PHI, RNC);

    setring(R0);
    psi; 
   
ideal conic=fetch(Rc,conic);
rtimer-t;
print("timer");
qring R1=std(conic);
ideal psi=fetch(R0,psi);
ideal l=psi[1],psi[2],psi[3],psi[4],psi[5],psi[6],psi[7];
map g=Rn,l[1..7];

reduce(g(RNC),std(0));

 1. 
 LIB "random.lib";
LIB "paraplanecurves.lib";
system("random", 10 );
ring R=0,(x0,x1,x2,x3,x4,x5,x6),dp;
 ring S0=0,(t0,t1),dp;
 ideal I=randomid(maxideal(6),7,31);
 map f=R,I[1..7];
 setring R;
 ideal RNC= kernel(S0,f);
rtimer=0;
 system("--ticks-per-sec",1000); 
 int t=rtimer;
 def Rc = rncItProjEven(RNC);
PHI;

setring Rc;
ideal conic =CONIC;
setring R;
 def Rn = invertBirMap(PHI, RNC);

    setring(Rn);
    psi; 
    rtimer-t;
    print("timer");
ideal conic=fetch(Rc,conic);

qring R1=std(conic);
ideal psi=fetch(Rn,psi);
ideal l=psi[1],psi[2],psi[3],psi[4],psi[5],psi[6],psi[7];
map g=R,l[1..7];

reduce(g(RNC),std(0));

2. 
LIB "random.lib";
LIB "paraplanecurves.lib";
system("random", 10 );
ring R=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8),dp;
ring S0=0,(t0,t1),dp;

ideal I=randomid(maxideal(8),9,31);

map f=R,I[1..9];

setring R;
ideal RNC= kernel(S0,f);

rtimer=0;
 system("--ticks-per-sec",1000); 
 int t=rtimer;
 def Rc = rncItProjEven(RNC);
PHI;

setring Rc;
ideal conic =CONIC;
setring R;
 def Rn = invertBirMap(PHI, RNC);

    setring(Rn);
    psi; 
    rtimer-t;
    print("timer");
ideal conic=fetch(Rc,conic);

qring R1=std(conic);
ideal psi=fetch(Rn,psi);
ideal l=psi[1],psi[2],psi[3],psi[4],psi[5],psi[6],psi[7],psi[8],psi[9];
map g=R,l[1..9];

reduce(g(RNC),std(0));

3. 
LIB "random.lib";
LIB "paraplanecurves.lib";
system("random", 10 );
ring R=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10),dp;
ring S0=0,(t0,t1),dp;

 ideal I=randomid(maxideal(10),11,2);

 map f=R,I[1..11];

 setring R;
ideal RNC= kernel(S0,f);

rtimer=0;
 system("--ticks-per-sec",1000); 
 int t=rtimer;
 def Rc = rncItProjEven(RNC);
PHI;

setring Rc;
ideal conic =CONIC;
setring R;
 def Rn = invertBirMap(PHI, RNC);
 rtimer-t;
    setring(Rn);
    psi; 

ideal conic=fetch(Rc,conic);

qring R1=std(conic);
ideal psi=fetch(Rn,psi);
ideal l=psi[1],psi[2],psi[3],psi[4],psi[5],psi[6],psi[7],psi[8],psi[9],psi[10],psi[11];
map g=R,l[1..11];
reduce(g(RNC),std(0));


//Ideal from minors
1.
LIB "random.lib";
LIB "paraplanecurves.lib";
system("random", 10 );
ring R=0, (x0,x1,x2,x3,x4),dp;
matrix m[2][4]=x0,x1,x2,x3,x1,x2,x3,x4;
ideal rNC=minor(m,2);
ideal I=randomid(maxideal(1),5,11);
I;
map f=R,I[1..5];
ideal RNC=f(rNC);
RNC;
rtimer=0;
 system("--ticks-per-sec",1000); 
 int t=rtimer;
 def Rc = rncItProjEven(RNC);
PHI;
setring Rc;
ideal conic =CONIC;
setring R;
 def Rn = invertBirMap(PHI, RNC);
 rtimer-t;
    setring(Rn);
    psi; 


    ideal conic=fetch(Rc,conic);

    qring R1=std(conic);
    ideal psi=fetch(Rn,psi);
    ideal l=psi[1],psi[2],psi[3],psi[4],psi[5];
    map g=R,l[1..5];
    reduce(g(RNC),std(0));

2. 
LIB "random.lib";
LIB "paraplanecurves.lib";
system("random", 10 );
ring R=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10),dp;
matrix m[2][10]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10;

ideal rNC=minor(m,2);
ideal I=randomid(maxideal(1),11,11);
I;
map f=R,I[1..11];
ideal RNC=f(rNC);
RNC;
rtimer=0;
 system("--ticks-per-sec",1000); 
 int t=rtimer;
 def Rc = rncItProjEven(RNC);
PHI;
setring Rc;
ideal conic =CONIC;
setring R;
 def Rn = invertBirMap(PHI, RNC);
 rtimer-t;
    setring(Rn);
    psi; 


    ideal conic=fetch(Rc,conic);

    qring R1=std(conic);
    ideal psi=fetch(Rn,psi);
    ideal l=psi[1],psi[2],psi[3],psi[4],psi[5],psi[6],psi[7],psi[8],psi[9],psi[10],psi[11];
    map g=R,l[1..11];
    reduce(g(RNC),std(0));


3.
LIB "random.lib";
LIB "paraplanecurves.lib";
system("random", 10 );
ring R=0,(x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12),dp;
matrix m[2][12]=x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12;

ideal rNC=minor(m,2);
ideal I=randomid(maxideal(1),13,11);
I;
map f=R,I[1..13];
ideal RNC=f(rNC);
RNC;
rtimer=0;
 system("--ticks-per-sec",1000); 
 int t=rtimer;
 def Rc = rncItProjEven(RNC);
PHI;
setring Rc;
ideal conic =CONIC;
setring R;
 def Rn = invertBirMap(PHI, RNC);

    setring(Rn);
    psi; 
    rtimer-t;
    print("timer");

    ideal conic=fetch(Rc,conic);

    qring R1=std(conic);
    ideal psi=fetch(Rn,psi);
    ideal l=psi[1],psi[2],psi[3],psi[4],psi[5],psi[6],psi[7],psi[8],psi[9],psi[10],psi[11],psi[12],psi[13];
    map g=R,l[1..13];
    reduce(g(RNC),std(0));

//ODD cases

2.
system("random", 10 );  
ring R=0,(x(1..10)),dp;
ring S=0,(t0,t1),dp;

 ideal I=randomid(maxideal(9),10);

 map f=R,I[1..10];

 setring R;
ideal RNC= kernel(S,f);
rtimer=0;
 system("--ticks-per-sec",1000); 
 int t0=rtimer;
ideal phi=rncItProjOdd(RNC);

def Rn = invertBirMap(phi,RNC);
rtimer-t0;

setring Rn;
psi;
ideal l=psi[1..10];
map g=R,l[1..10];
g(RNC);

3.
system("random", 10 ); 
ring R=0,(x(1..12)),dp;
ring S=0,(t0,t1),dp;

 ideal I=randomid(maxideal(11),12);

 map f=R,I[1..12];

 setring R;
ideal RNC= kernel(S,f);
rtimer=0;
 system("--ticks-per-sec",1000); 
 int t1=rtimer;
ideal phi=rncItProjOdd(RNC);

def Rn = invertBirMap(phi,RNC);
rtimer-t1;

setring Rn;
psi;
ideal l=psi[1..12];
map g=R,l[1..12];
g(RNC);
4. ring R=0,(x(1..14)),dp;
ring S=0,(t0,t1),dp;

 ideal I=randomid(maxideal(13),14,3);

 map f=R,I[1..14];

 setring R;
ideal RNC= kernel(S,f);
rtimer=0;
 system("--ticks-per-sec",1000); 
 int t1=rtimer;
ideal phi=rncItProjOdd(RNC);

def Rn = invertBirMap(phi,RNC);
rtimer-t1;

setring Rn;
psi;
ideal l=psi[1..14];
map g=R,l[1..14];
g(RNC);
//For Ringular
ring S=0, (x0,x1,x2,x3,x4,x5,x6),dp;
matrix m[2][6]=x0,x1,x2,x3,x4,x5,x1,x2,x3,x4,x5,x6;
ideal RNC=minor(m,2);

def Rc = rncItProjEven(RNC);
PHI;
 def Rn = invertBirMap(PHI, RNC);