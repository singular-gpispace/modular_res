      ///////////////////////////////////////
       version="version modulargp.lib 0.1 May_2022 ";
       category="Algebraic geometry";
       info="
       LIBRARY: modulargp.lib  demo procedures for modular pattern

       OVERVIEW:
           This library contains SINGULAR procedures to demonstrate the
           modular pattern of the Singular/GPI-Space framework.
           The newstruct types token  must be defined.

       PROCEDURES:
       stdmodp(token,token)               computes a standard basis
                                           modulo p
       liftt(token, token)                lift the two modular result
       farey(token)                       
       compatible(token, token)           
       compare(token, token)
";
LIB "elim.lib";
LIB "general.lib";
LIB "primdec.lib";
LIB "absfact.lib";
LIB "matrix.lib";
LIB "random.lib";
LIB "homolog.lib";
LIB "integralbasis.lib";
LIB "normal.lib";



        proc genNextPrime(token input, int p, int m)
        {
            LIB "modstd.lib";
            def I = input.data[1];
            token t;
            token tok;
            int temp = p;
            int lastt;
            while( size(t.data) < m)
            {
               
                if(temp == 2)
                {
                    if (size(t.data) == 0 ) {ERROR("no more primes");}
                    else {break;} 
                }
                temp = prime(temp-1);
                if (primeTest(I,temp))
                {   
                    t.fieldnames[size(t.fieldnames)+1] = "prime token";
                    tok.fieldnames = list("integer");
                    tok.data[1] = temp;
                    t.data[size(t.data)+1] = tok;
                }
            }
            t.fieldnames[size(t.fieldnames)+1] = "last_prime";
            lastt = tok.data[1];  
            t.data[size(t.data) +1]  = lastt;
            return(t);
        }

       proc hashlead(ideal I)
       {
            if(size(I) == 0)
            {
                return(string(-1));
            }
            int i;
            int j;
            string hash="";
            intvec v;
            ideal J = lead(I);
            for(i=1; i<=size(J); i++)
            {
                v = leadexp(J[i]);
                for(j=1; j<=size(v); j++)
                {
                 hash = hash +  string(v[j]);
                }
            }
            return(hash);

        }

        proc stdmodp (token input, token in_prime)
            "USAGE: stdmodp(input, in_prime); input token
            RETURN: an token output containing a standard basis 
                    output.generators of the ideal input.generators in a ring
                    with prescribed characteristic input.modulus
            NOTE: The types token are defined . This procedure is 
                    intended to be called as a transition procedure inside the
                    worker process (that is, the "inner" instances of SINGULAR).
"
        {
            def br = basering;
            int p = in_prime.data[1];
            def I = input.data[1];
            def lbr = ringlist(br);
            lbr[1] = p;
            def rp = ring(lbr);
            setring rp;
            def I = imap(br,I);
            option(redSB);
            def J = std(I);
            setring br;  
            def J = fetch(rp,J);
            token output;
            output.fieldnames = list("generators","modulus",
                                    "numberofprimes","leadmon");
            output.data[1] = J;
            output.data[2] = bigint(p);
            output.data[3] = int(1);
            output.data[4] = hashlead(J);
            return(output);
       }


       proc ImageRationalMap(token input, token in_prime)
       {
        LIB "elim.lib";
        def phi = input.data[1];
        int p = in_prime.data[1];
        def I = input.data[2];
        def br = basering;
        def lbr = ringlist(br);
        int n = nvars(br);
        // number of variables of target polynomial ring, that is 7
        int m = size(phi);
        /*phi: P^(n-1) --> P^(m-1)*/
        // make a polynomial ring for the graph with variables
        // t(0)..t(n-1) and  x(0)..x(m-1)
        list rl = ringlist(br);
        rl[1] = p;
        int k;
        for(k = 0; k < n; k++)
        {
            rl[2][k+1] = "t("+string(k)+")";
        }
        for(k = 0; k < m; k++)
        {
            rl[2][k+n+1] = "x("+string(k)+")";
        }
        rl[3]= list(list("dp",1:n),list("dp",1:m),list("C",0));
        def Rbig0 = ring(rl);
        setring Rbig0;
        // fetch I and phi to that new ring
        ideal phi = fetch(br,phi);
        ideal I = fetch(br,I);
        // ideal of the graph;
        ideal mi = maxideal(1);
        ideal xv = mi[1..n];
        ideal yv  = mi[n+1..n+m];
        matrix HM[2][m] = concat(transpose(yv),transpose(phi));
        option(redSB);
        ideal graph = sat(I+minor(HM,2),phi)[1];
        //Extracting the image from the graph
        for(k = 1; k <= n; k++)
        {
            graph = subst(graph,xv[kj],0);
        }
        graph = compress(graph);
        //create the target ring
        setring br;
        list rl2 = rl[2];
        rl[1] = 0;
        rl[2] = list(rl2[n+1..n+m]);
        rl[3]= list(list("dp",1:m),list("C",0));
        def Rtarget = ring(rl);
        setring Rtarget;
        ideal image = imap(Rbig0,graph);
        //write the result in a token
        token output;
        output.fieldnames = list("generators image","modulus","numberofprimes","leadmon");
        output.data[1] = image;
        output.data[2] = bigint(p);
        output.data[3] = int(1);
        output.data[4] = hashlead(image);
        return(output);
       }

       proc liftt (token left, token right)
       "USAGE: liftt(left, right); input token
       RETURN: an token output containing a lift of the two tokens left and right.
       NOTE  : The types token are defined . This procedure is intended to
               be called as a transition procedure inside the worker process
               (that is, the "inner" instances of SINGULAR).
"          
       {


    //       string path = "/home/gnawali/gspc-modres/example_dir/temp/";  
    // string filename;
  
   
           def J = right.data[1];
           bigint p = right.data[2];
           int n = right.data[3];
           def I = left.data[1];
           bigint q = left.data[2];
           int m =  left.data[3];

        
    
    // filename = "prime p.ssi";
    // link l0 = "ssi:w " + path + filename;
    // write(l0, p, "prime");
    // close(l0);
    //  filename = "prime q.ssi";
    // link l0 = "ssi:w " + path + filename;
    //  write(l0, q, "prime");
    // close(l0);
    //   filename = "LIFT1.ssi";
    //         link l1 = "ssi:w " + path + filename;
    // write(l1, I, "LIFT=I");
    // close(l1);
    // filename = "LIFT2.ssi";
    //  link l2 = "ssi:w " + path + filename;
    //        write(l2, J, "LIFT=J");
    // close(l2);
           list IJ;
          
            //  filename = "CRTI.ssi";
            //   link l2 = "ssi:w " + path + filename;
            //  filename = "CRTJ.ssi";
            //   link l3 = "ssi:w " + path + filename;
            //      write(l2, size(I), "CRT, size(I)");
            //         close(l2);
                    int a=size(I);
                    int b=size(J);
                   
                for( int i = 1; i <=size(J); i++)
                             {  
                //   write(l2, I[i], "CRT I[i]");
                //     close(l2);
                //       write(l3,  J[i] , "CRT J[i]");
                //     close(l2);
                           IJ[i] = chinrem(list(I[i],J[i]),list(q,p));
                //   write(l2,  IJ[i] , "CRT IJ");
                //     close(l2);
        
                          }
                 
     
        
           token output;
           output.fieldnames = list("generators","modulus","numberofprimes");
           output.data[1] = IJ;
           output.data[2] = p*q;  
           output.data[3] = n+m;
           return(output);
       }

        proc fareyy (token liftedres)
       "USAGE: fareyy(liftedres); 
       RETURN: a token  containing a farey lift of the data in the token liftedres.
"          
        {
            def I = liftedres.data[1];
            bigint N = liftedres.data[2];
            int index = liftedres.data[3];

//    string path = "/home/gnawali/gspc-modres/example_dir/temp/";  
//     string filename;
//     filename = "fareyy.ssi";
//     link l = "ssi:w " + path + filename;
//     write(l, I, "fareyy");
//     close(l);
            int n = system("--cpus");
            system("--cpus",1);
            def J = farey(I,N);
    //          write(l, J, "final Lift");
    // close(l);
            system("--cpus",n);
            token t;
            t.fieldnames = list("farey_lift","Nb_generators","index");
            t.data[1] = list(J);
            t.data[2] = 1;
            t.data[3] = list(index);
            return(t);
        }


         proc compatible (token fareylift, token testToken)
       "USAGE: compatible(token, token); 
       RETURN: Test if any coefficient occuring in the data of fareylift is divisible by the characteristic p of the data in the testToken."

        {
            LIB "modstd.lib";
            bigint p = testToken.data[2];
            int testt = primeTest(fareylift.data[1],p);
            token t;
            t.fieldnames = list("test_result");
            t.data[1] = testt;
            return(t);
        }

         proc compare (token fareylift, token testToken)
       "USAGE: compare(token, token); 
       RETURN: Reduce the data of the farey lift modulo the characteristic of the testToken and check if they are equal."

       {
            def J = fareylift.data[1];
            def I = testToken.data[1];
            bigint p = testToken.data[2];
            def br = basering;
            def lbr = ringlist(br);
            lbr[1] = int(p);
            def rp = ring(lbr);
            setring rp;
            def I = fetch(br,I);
            def J = fetch(br,J);
            token t;
            t.fieldnames=list("test result");
            t.data[1] = int(0);
            if ( hashresolution(I) != hashresolution(J))
            //if (hashlead(ideal(I[1])) != hashlead(ideal(J[1])))
            {
                return(t);
            }
            for(int i = 1; i <= size(I); i++)
            {
                if ( I[i] != J[i]) { setring(br); return(t); }
            }
            setring br;
            t.data[1] = int(1);
            return(t);
       }


        proc splitt(token in)
        {
            def I = in.data[1];
            bigint p = in.data[2];
            token out;
            token t;
            int i;
            int n = size(I);
            if (n == 0)
            {
                n = 1;
            }
            for(i=1; i<=n; i++)
            {
                t.fieldnames = list("matrix","modulus","index");
                t.data[1] = I[i];
                t.data[2] = p;
                t.data[3] = i;
                out.fieldnames[i] = "matrices";
                out.data[i] = t;
            }
            out.fieldnames[size(out.fieldnames)+1] = "total_number_matrices";
            out.data[size(out.data) + 1] = n;
            return(out);
        }

        proc appendGenerator(token left, token right)
        {
            LIB "general.lib";
            def I = right.data[1];
            list indexI = right.data[3];
            def J = left.data[1];
            list indexJ = left.data[3];
            list res = I + J;
            list indexres = indexI + indexJ;
            list index_sorted = sort(indexres);
            list res_sorted;
            intvec perm = index_sorted[2];
            for(int i = 1; i <= size(perm); i++)
            {
                res_sorted[i] = res[perm[i]];
            }
            token out;
            out.fieldnames[1] = list("matrices","nb_matrices","index");
            out.data[1] = res_sorted;
            out.data[2]= size(indexres);
            out.data[3] = index_sorted[1];
            return(out);
        }


        proc fresmodp (token input, token in_prime)
            "USAGE: fresmodp(input, in_prime); input token
            RETURN: an token output containing a free resolution of the input 
            NOTE: The types token are defined . This procedure is 
                    intended to be called as a transition procedure inside the
                    in a workflow.
"
        {
            def br = basering;
            int p = in_prime.data[1];
            def I = input.data[1];
            def lbr = ringlist(br);
            lbr[1] = p;
            def rp = ring(lbr);
            setring rp;
            def I = imap(br,I);
            option(redSB);
            //attrib(I,"isSB",1);
            I = std(I);
            resolution s = fres(I,0);
            list ls;
            for(int i = size(s)-1; i <= size(s)-1; i++)
            {
                ls[1] = matrix(s[i]);
            }
            setring br;  
            list ls = fetch(rp,ls);
            //ideal I = ls[1];
            token output;
            output.fieldnames = list("resolution","modulus",
                                    "numberofprimes","hash");
            output.data[1] = ls;
            output.data[2] = bigint(p);
            output.data[3] = int(1);
            output.data[4] = hashresolution(ls);
           // output.data[4] = hashlead(I);
            return(output);
       }










proc modular_invertBirMap(ideal J0, ideal I) {
    def Roriginal = basering;
    int n = nvars(Roriginal);
    int m = size(J0);
    
   
    
    // Initialize the graph
    list rl = ring_list(Roriginal);
       int k;
   for(k = 1; k <= n; k++)
     {
        rl[2][k] = "x("+string(k)+")";
     }
   for(k = 1; k <= m; k++)
     {
        rl[2][k+n] = "y("+string(k)+")";
     }

    rl[3] = list(list("dp", 1:(n + m)), list("C", 0));
    def Rbig0 = ring(rl);
   setring Rbig0;
    ideal I = fetch(Roriginal, I);
    ideal J0 = fetch(Roriginal, J0);
    
    ideal mi = maxideal(1);
    print("mi=");print(mi);
   ideal xv = mi[1..n];
  
   ideal yv  = mi[n+1..n+m];
  

    matrix HM[2][m] = concat(transpose(yv),transpose(J0));
   ideal graph = sat(I+minor(HM,2),J0)[1];
   graph = sat(graph,xv)[1];
    
   intvec Hgraph = hilb(graph,1);
   setring Roriginal;
   rl[3]= list(list("dp",1:n),list("dp",1:m),list("C",0));
   def Rbig = ring(rl);
   setring Rbig;
   ideal graph = imap(Rbig0,graph);
   graph = std(graph,Hgraph);
   ideal xv = imap(Rbig0,xv);
   /*The ideal J defines the image of phi*/
   ideal J = graph;
   for(k = 1; k <= n; k++)
     {
        J = subst(J,xv[k],0);
     }
   J = compress(J);
   /*now we start inverting phi to psi*/
   matrix relpsi = diff(xv,graph);
   for(k = 1; k <= n; k++)
     {
        relpsi = subst(relpsi,xv[k],0);
     }
    relpsi = compress(relpsi);
    list rl = ring_list(Rbig);
    list rl2 = rl[2];
    rl[2] = list(rl2[n+1..n+m]);
    rl[3]= list(list("dp",1:m),list("C",0));
    def Rtarget = ring(rl);
    setring Rtarget;
    ideal J = imap(Rbig,J);
    qring RtargetmodJ = std(J);
    matrix relpsi = imap(Rbig,relpsi);
    relpsi = syz(transpose(relpsi));
    ideal psi = submat(relpsi,1..nrows(relpsi),1);
    setring Rtarget;
    ideal psi = imap(RtargetmodJ,psi);
    export(J,psi);
    int p = printlevel - voice + 3;
    dbprint(p,"// 'invertBirMap' created a ring together with two ideals J and psi.");
    dbprint(p,"// Supposing you typed, say,  def RPn = invertBirMap(phi,I);");
    dbprint(p,"// you may access the ideals by typing");
    dbprint(p,"//      setring RPn; J; psi;");
    return(Rtarget);
  }




proc modular_parametrization_C(token input, token in_prime)
            "USAGE: liftPhi(token input, token in_prime, token phi); input token
            RETURN: a token output containing a free resolution of the input 
            NOTE: The types token are defined. This procedure is 
                  intended to be called as a transition procedure inside the
                  workflow."
{
    LIB "paraplanecurves.lib";
     def br = basering;
    int p = in_prime.data[1];
    def RNC = input.data[1];
    //def I = input.data[2]; 
            def lbr = ringlist(br);
            lbr[1] = p;
            def rp = ring(lbr);
            setring rp;
            def RNC  = imap(br,RNC);
            //option(redSB);
            //attrib(I,"isSB",1);
           // RNC  = std(RNC);
  ideal f=rncItProjOdd(RNC);
    // Write debugging information
    // string path = "/home/gnawali/gspc-modres/example_dir/temp/";  
    // string filename;
    
    // filename = "prime.ssi";
    // link l0 = "ssi:w " + path + filename;
    // write(l0, p, "prime");
    // close(l0);

    // filename = "ideal.ssi";
    // link l = "ssi:w " + path + filename;
    // write(l, RNC, "ideal");
    // close(l);

    // filename = "adjideal.ssi";
    // link l1 = "ssi:w " + path + filename;
    // write(l1, f, "RNC");
    // close(l1);
  
        
    // Compute inverse birational map
    def Rn = modular_invertBirMap(f, RNC);
    setring(Rn);
    psi;  // Assume `psi` is computed in Rn as part of the birational map computation.

    // Debug: Write the inverse map
    // write(l1, psi, "inverse map");
    // close(l1);

   
    list ls;
    matrix s0[1][size(psi)];
    for (int k = 1; k <= size(psi); k++) {
        s0[1, k] = psi[k];
    }
     ls[1] = s0;

    // Debug: Write matrix `s0`
    // write(l1, s0, "matrix s0[1][size(psi)]");
    // close(l1);

    // Store the matrix in a list
   
   

 //create the target ring
     
        
         def lb = ringlist(Rn);
            lb[1] = 0;
        def R0 = ring(lb);
//  filename = "NewRing.ssi";
//     link L = "ssi:w " + path + filename;
//     write(L,  R0, "NewRing");
//     close(L);
          setring R0;
        ideal psi = imap(Rn,psi);
        list ls=fetch(Rn,ls);
    //     write(l1, psi, "inverse map=psi");
    // close(l1);

    //  filename = "psi.ssi";
    // link L = "ssi:w " + path + filename;
    // write(L,  ls, "psi as a list");
    // close(L);
    // Prepare output token
   
    token output;
    output.fieldnames = list("Lifted_map", "modulus", "numberofprimes", "hash");
    output.data[1] =ls;  // The lifted map in the new modularized ring
    output.data[2] = bigint(p);
    output.data[3] = int(1);
    output.data[4] = hashresolution(ls);

    // Debug: Write final lifted map
   

    // Return the output token
    return(output);
}





       proc hashresolution(list ls)
       {
            int n = size(ls);
            string hash = string(n);
            hash = hash + hashlead(ideal(ls[1]));
            if(n == 0)
            {
                return(hash);
            }
            for(int i = 1; i <= n; i++)
            {
                hash  = hash + string(nrows(ls[i]));
                hash = hash + string(ncols(ls[i]));
            }
            return(hash);
       }